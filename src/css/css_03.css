/*一、css三大特性

1、层叠性
    - 样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式
    - 样式不冲突，不会层叠
2、继承性
    - 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。
    - 子元素可以继承父元素的样式：（text-，font-，line-这些元素开头的可以继承，以及color属性）
    - 行高的继承性： body { font:12px/1.5 Microsoft YaHei; }
    - 行高可以跟单位也可以不跟单位
    - 如果子元素没有设置行高，则会继承父元素的行高为 1.5
    - 此时子元素的行高是：当前子元素的文字大小 * 1.5
    - body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高
3、优先级
    - 选择器相同，则执行层叠性
    - 选择器不同，则根据选择器权重执行
        继承或*              0,0,0,0
        元素选择器            0,0,0,1
        类选择器 伪类选择器    0,0,1,0
        ID选择器             0,1,0,0
        行内样式style=""      1,0,0,0
        !important重要的     无穷大
    - 权重是有4组数字组成,但是不会有进位
    - 可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推
    - 等级判断从左向右，如果某一位数值相同，则判断下一位数值
    - 可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大
    - 继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0
    权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。
    - div ul  li   ------>      0,0,0,3
    - .nav ul li   ------>      0,0,1,2
    - a:hover      -----—>      0,0,1,1
    - .nav a       ------>      0,0,1,1

二、盒子模型

1、边框（border）
    - 语法： border : border-width || border-style || border-color;
    - 边框样式 border-style 可以设置如下值：
        - none：没有边框即忽略所有边框的宽度（默认值）
        - solid：边框为单实线(最为常用的)
        - dashed：边框为虚线
        - dotted：边框为点线
    - border: 1px solid red;
    - border-top: 1px solid red;   只设定上边框， 其余同理
    - border-collapse:collapse;表示相邻边框合并在一起
    - 边框会影响盒子实际大小,边框会额外增加盒子的实际大小,因此我们有两种方案解决：
        - 测量盒子大小的时候,不量边框。
        - 如果测量的时候包含了边框,则需要 width/height 减去边框宽度

2、内边距（padding）
    - padding 属性用于设置内边距，即边框与内容之间的距离。
        - padding: 5px;  上下左右
        - padding: 5px 10px;  上下 左右
        - padding: 5px 10px 20px;  上 左右 下
        - padding: 5px 10px 20px 30px;  上 右 下 左
    - 也可以分别设置上下左右内边距 padding-left 等
    - 内边距会影响盒子实际大小
        - 如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。
        - 如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。
    - 解决方案：如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。

3、外边距（margin）
    - 可以分别设置上下左右外边距 margin-left 等
        - 外边距可以让块级盒子水平居中的两个条件：
        - 盒子必须指定了宽度（width）。
    - 盒子左右的外边距都设置为 auto 。
    - 常见的写法，以下三种都可以：
        margin-left: auto;   margin-right: auto;
        margin: auto;
        margin: 0 auto;
    - 注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。

    - 使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。主要有两种情况:
        - 相邻块元素垂直外边距的合并
            当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，
            则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。
            解决方案：尽量只给一个盒子添加 margin 值。
        - 嵌套块元素垂直外边距的塌陷
            对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。
            解决方案：
            - 可以为父元素定义上边框。
            - 可以为父元素定义上内边距。
            - 可以为父元素添加 overflow:hidden。

    - 清除内外边距
        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。
        * {
            padding:0;    清除内边距
            margin:0;     清除外边距
        }
        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了
*/
